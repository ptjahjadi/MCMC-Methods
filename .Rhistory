return(sum(singlelikelihood))
}
prior = function(param) {
return(log(1/param[2]))
}
posterior = function(param) {
return(l.likelihood(param) + prior(param))
}
prop.f = function(param){
tau.n = rgamma(1,5*param[2], 5)
mu.n = rnorm(1,param[1], sqrt(tau.n))
return(c(mu.n, tau.n))
}
#prop.f2 = function(param){
#  tau.n = rgamma(1, 5*param[2],5)
#  return(rnormgamma(1, param[1], 1/tau.n, 5*param[2], 5))
#}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1, 2))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = prop.f(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(9,2)
chain = run_metropolis_MCMC(startvalue,10000)
plot(1:10001, chain[,1], type='l', col='blue')
plot(1:10001, chain[,2], type='l', col='blue')
# param[1] = mu, param[2] = tau
l.likelihood = function(param) {
mu = param[1]
tau = param[2]
singlelikelihood = dnorm(Assign4Data, mean=mu, sd = sqrt(1/tau), log=T)
return(sum(singlelikelihood))
}
prior = function(param) {
return(log(1/param[2]))
}
posterior = function(param) {
return(l.likelihood(param) + prior(param))
}
prop.f = function(param){
tau.n = rgamma(1,5*param[2], 5)
mu.n = rnorm(1,param[1], sqrt(tau.n))
return(c(mu.n, tau.n))
}
#prop.f2 = function(param){
#  tau.n = rgamma(1, 5*param[2],5)
#  return(rnormgamma(1, param[1], 1/tau.n, 5*param[2], 5))
#}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1, 2))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = prop.f(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(9,2)
chain = run_metropolis_MCMC(startvalue,10000)
plot(1:10001, chain[,1], type='l', col='blue')
plot(1:10001, chain[,2], type='l', col='blue')
Assign4Dat
Assign4Data
data_list = c()
for(i in 1:100) {
data_list = c(data_list, as.numeric(Assign4Data[i]))
}
data_list
# param[1] = mu, param[2] = tau
l.likelihood = function(param) {
mu = param[1]
tau = param[2]
singlelikelihood = dnorm(data_list, mean=mu, sd = sqrt(1/tau), log=T)
return(sum(singlelikelihood))
}
prior = function(param) {
return(log(1/param[2]))
}
posterior = function(param) {
return(l.likelihood(param) + prior(param))
}
prop.f = function(param){
tau.n = rgamma(1,5*param[2], 5)
mu.n = rnorm(1,param[1], sqrt(tau.n))
return(c(mu.n, tau.n))
}
#prop.f2 = function(param){
#  tau.n = rgamma(1, 5*param[2],5)
#  return(rnormgamma(1, param[1], 1/tau.n, 5*param[2], 5))
#}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1, 2))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = prop.f(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(9,2)
chain = run_metropolis_MCMC(startvalue,10000)
plot(1:10001, chain[,1], type='l', col='blue')
plot(1:10001, chain[,2], type='l', col='blue')
startvalue = c(7, 1)
chain = run_metropolis_MCMC(startvalue,10000)
plot(1:10001, chain[,1], type='l', col='blue')
plot(1:10001, chain[,2], type='l', col='blue')
data_list = c()
for(i in 1:100) {
data_list = c(data_list, as.numeric(Assign4Data[i]))
}
l.likelihood = function(parameters) {
mu = parameters[1]
tau = parameters[2]
singlelikelihood = dnorm(data_list, mean=mu, sd = sqrt(1/tau), log=T)
return(sum(singlelikelihood))
}
prior = function(parameters) {
return(log(1/parameters[2]))
}
posterior = function(parameters) {
return(l.likelihood(parameters) + prior(parameters))
}
prop.f = function(parameters){
tau.n = rgamma(1,5*parameters[2], 5)
mu.n = rnorm(1,parameters[1], sqrt(tau.n))
return(c(mu.n, tau.n))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1, 2))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = prop.f(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
num_iterations = 10000
startvalue = c(7, 1)
chain = run_metropolis_MCMC(startvalue, num_iterations)
plot(1:(num_iterations+1), chain[,1], type='l', col='red')
plot(1:(num_iterations+1), chain[,2], type='l', col='red')
# Convert the data into a vector
data_list = c()
for(i in 1:100) {
data_list = c(data_list, as.numeric(Assign4Data[i]))
}
# Determining the Likelihood Function
l.likelihood = function(parameters) {
mu = parameters[1]
tau = parameters[2]
singlelikelihood = dnorm(data_list, mean=mu, sd = sqrt(1/tau), log=T)
return(sum(singlelikelihood))
}
# Determining the Prior
prior = function(parameters) {
return(log(1/parameters[2]))
}
# Determining the Posterior
posterior = function(parameters) {
return(l.likelihood(parameters) + prior(parameters))
}
# Determining the Proposal Function
prop.f = function(parameters){
tau.n = rgamma(1, 5*parameters[2], 5)
mu.n = rnorm(1, parameters[1], sqrt(tau.n))
return(c(mu.n, tau.n))
}
# The Metropolis-Hastings Algorithm
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1, 2))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = prop.f(chain[i,])
probability = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probability){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
num_iterations = 10000
startvalue = c(7, 1)
chain = run_metropolis_MCMC(startvalue, num_iterations)
plot(1:(num_iterations+1), chain[,1], type='l', col='red')
plot(1:(num_iterations+1), chain[,2], type='l', col='red')
startvalue = c(1, 1)
plot(1:(num_iterations+1), chain[,1], type='l', col='red')
plot(1:(num_iterations+1), chain[,2], type='l', col='red')
plot(1:(num_iterations+1), chain[,1], type='l', col='red')
chain = run_metropolis_MCMC(startvalue, num_iterations)
plot(1:(num_iterations+1), chain[,1], type='l', col='red')
startvalue = c(5, 1)
chain = run_metropolis_MCMC(startvalue, num_iterations)
# Determining the Likelihood Function
l.likelihood = function(parameters) {
mu = parameters[1]
tau = parameters[2]
singlelikelihood = dnorm(data_list, mean=mu, sd = sqrt(1/tau), log=T)
return(sum(singlelikelihood))
}
plot(1:(num_iterations+1), chain[,1], type='l', col='red')
plot(1:(num_iterations+1), chain[,2], type='l', col='red')
startvalue = c(7, 1)
chain = run_metropolis_MCMC(startvalue, num_iterations)
plot(1:(num_iterations+1), chain[,1], type='l', col='red')
plot(1:(num_iterations+1), chain[,2], type='l', col='red')
plot(1:(num_iterations+1), chain[,1], ylab = "mu", type='l', col='red')
plot(1:(num_iterations+1), chain[,2], ylab = "tau", type='l', col='red')
chain2 = run_metropolis_MCMC(startvalue2, num_iterations)
# Convert the data into a vector
data_list = c()
for(i in 1:100) {
data_list = c(data_list, as.numeric(Assign4Data[i]))
}
# Determining the Likelihood Function
l.likelihood = function(parameters) {
mu = parameters[1]
tau = parameters[2]
singlelikelihood = dnorm(data_list, mean=mu, sd = sqrt(1/tau), log=T)
return(sum(singlelikelihood))
}
# Determining the Prior
prior = function(parameters) {
return(log(1/parameters[2]))
}
# Determining the Posterior
posterior = function(parameters) {
return(l.likelihood(parameters) + prior(parameters))
}
# Determining the Proposal Function
prop.f = function(parameters){
tau.n = rgamma(1, 5*parameters[2], 5)
mu.n = rnorm(1, parameters[1], sqrt(tau.n))
return(c(mu.n, tau.n))
}
# The Metropolis-Hastings Algorithm
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1, 2))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = prop.f(chain[i,])
probability = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probability){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
num_iterations = 10000
startvalue = c(7, 1)
startvalue2 = c(0.5, 0.1)
chain = run_metropolis_MCMC(startvalue, num_iterations)
chain2 = run_metropolis_MCMC(startvalue2, num_iterations)
plot(1:(num_iterations+1), chain[,1], ylab = "mu", type='l', col='blue')
points(1:(num_iterations+1), chain2[,1], ylab = "mu", type='l', col='red')
plot(1:(num_iterations+1), chain[,2], ylab = "tau", type='l', col='blue')
points(1:(num_iterations+1), chain2[,2], ylab = "tau", type='l', col='red')
#-------------------------------------------------------------------------------------------------------------------------------------
# Plots for marginal posterior distributions
plot(density(chain[,1]), ylab = "posterior dist", xlab = "mu1", main="")
plot(density(chain2[,1]), ylab = "posterior dist", xlab = "mu2", main="")
plot(density(chain[,1]), ylab = "posterior dist", xlab = "tau1", main="")
plot(density(chain2[,1]), ylab = "posterior dist", xlab = "tau2", main="")
# Marginal posterior means
mean(chain[,1])
?mfrow
par(mfrow=c(2,2))
plot(density(gibbs1$mu), ylab = "posterior dist", xlab = "mu1", main="")
plot(density(gibbs2$mu), ylab = "posterior dist", xlab = "mu2", main="")
plot(density(gibbs1$tau), ylab = "posterior dist", xlab = "tau1", main="")
plot(density(gibbs2$tau), ylab = "posterior dist", xlab = "tau2", main="")
# Marginal posterior means
mean(gibbs1$mu)
mean(gibbs2$mu)
mean(gibbs1$tau)
mean(gibbs2$tau)
#Credible interval for mu and tau
credint_mu1 = c(mean(gibbs1$mu) - qnorm(0.975, xbar, sqrt(1/(n*tau))) * (sd(gibbs1$mu) / (m)), mean(gibbs1$mu) + qnorm(0.975, xbar, sqrt(1/(n*tau))) * (sd(gibbs1$mu) / (m)))
credint_mu2 = c(mean(gibbs2$mu) - qnorm(0.975, xbar, sqrt(1/(n*tau))) * (sd(gibbs2$mu) / (m)), mean(gibbs2$mu) + qnorm(0.975, xbar, sqrt(1/(n*tau))) * (sd(gibbs2$mu) / (m)))
credint_tau1 = c(mean(gibbs1$tau) - qgamma(0.975, n/2, gamma_rate) * (sd(gibbs1$tau) / (m)), mean(gibbs1$tau) + qgamma(0.975, n/2, gamma_rate) * (sd(gibbs1$tau) / (m)))
credint_tau2 = c(mean(gibbs2$tau) - qgamma(0.975, n/2, gamma_rate) * (sd(gibbs2$tau) / (m)), mean(gibbs2$tau) + qgamma(0.975, n/2, gamma_rate) * (sd(gibbs2$tau) / (m)))
mean(gibbs1$mu)
mean(gibbs2$mu)
mean(gibbs1$tau)
mean(gibbs2$tau)
credint_mu1
credint_mu2
credint_tau1
credint_tau2
mean(chain[,1])
mean(chain2[,1])
mean(chain[,2])
mean(chain2[,2])
#Credible interval for mu and tau
credint_mu1 = c(mean(chain[,1]) - qnorm(0.975, xbar, sqrt(1/(n*tau))) * (sd(chain[,1]) / (m)), mean(chain[,1]) + qnorm(0.975, xbar, sqrt(1/(n*tau))) * (sd(chain[,1]) / (m)))
credint_mu2 = c(mean(chain2[,1]) - qnorm(0.975, xbar, sqrt(1/(n*tau))) * (sd(chain2[,1]) / (m)), mean(chain2[,1]) + qnorm(0.975, xbar, sqrt(1/(n*tau))) * (sd(chain2[,1]) / (m)))
credint_tau1 = c(mean(chain[,2]) - qgamma(0.975, n/2, gamma_rate) * (sd(chain[,2]) / (m)), mean(chain[,2]) + qgamma(0.975, n/2, gamma_rate) * (sd(chain[,2]) / (m)))
credint_tau2 = c(mean(chain2[,2]) - qgamma(0.975, n/2, gamma_rate) * (sd(chain2[,2]) / (m)), mean(chain2[,2]) + qgamma(0.975, n/2, gamma_rate) * (sd(chain2[,2]) / (m)))
mean(chain[,1])
mean(chain2[,1])
mean(chain[,2])
mean(chain2[,2])
credint_mu1
credint_mu2
credint_tau1
credint_tau2
# Convert the data into a vector
data_list = c()
for(i in 1:100) {
data_list = c(data_list, as.numeric(Assign4Data[i]))
}
# Determining the Likelihood Function
l.likelihood = function(parameters) {
mu = parameters[1]
tau = parameters[2]
singlelikelihood = dnorm(data_list, mean=mu, sd = sqrt(1/tau), log=T)
return(sum(singlelikelihood))
}
# Determining the Prior
prior = function(parameters) {
return(log(1/parameters[2]))
}
# Determining the Posterior
posterior = function(parameters) {
return(l.likelihood(parameters) + prior(parameters))
}
# Determining the Proposal Function
prop.f = function(parameters){
tau.n = rgamma(1, 5*parameters[2], 5)
mu.n = rnorm(1, parameters[1], sqrt(tau.n))
return(c(mu.n, tau.n))
}
# The Metropolis-Hastings Algorithm
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1, 2))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = prop.f(chain[i,])
probability = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probability){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
#m = Number of iterations
m = 10000
startvalue = c(7, 1)
startvalue2 = c(0.5, 0.1)
chain = run_metropolis_MCMC(startvalue, m)
chain2 = run_metropolis_MCMC(startvalue2, m)
plot(1:(m+1), chain[,1], ylab = "mu", type='l', col='blue')
points(1:(m+1), chain2[,1], ylab = "mu", type='l', col='red')
plot(1:(m+1), chain[,2], ylab = "tau", type='l', col='blue')
points(1:(m+1), chain2[,2], ylab = "tau", type='l', col='red')
mean(chain[,1])
mean(chain2[,1])
mean(chain[,2])
mean(chain2[,2])
credint_mu1
credint_mu2
credint_tau1
credint_tau2
mean(chain[,1])
mean(chain2[,1])
mean(chain[,2])
mean(chain2[,2])
credint_mu1 = c(mean(chain[,1]) - qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(chain[,1]) / (m)),
mean(chain[,1]) + qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(chain[,1]) / (m)))
credint_mu2 = c(mean(chain2[,1]) - qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(chain2[,1]) / (m)),
mean(chain2[,1]) + qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(chain2[,1]) / (m)))
credint_tau1 = c(mean(chain[,2]) - qgamma(0.95, n/2, gamma_rate) * (sd(chain[,2]) / (m)),
mean(chain[,2]) + qgamma(0.95, n/2, gamma_rate) * (sd(chain[,2]) / (m)))
credint_tau2 = c(mean(chain2[,2]) - qgamma(0.95, n/2, gamma_rate) * (sd(chain2[,2]) / (m)),
mean(chain2[,2]) + qgamma(0.95, n/2, gamma_rate) * (sd(chain2[,2]) / (m)))
mean(chain[,1])
mean(chain2[,1])
mean(chain[,2])
mean(chain2[,2])
credint_mu1
credint_mu2
credint_tau1
credint_tau2
#m = number of samples of (mu, tau) values.
m = 1000
#Credible interval for mu and tau
credint_mu1 = c(mean(gibbs1$mu) - qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(gibbs1$mu) / (m)),
mean(gibbs1$mu) + qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(gibbs1$mu) / (m)))
credint_mu2 = c(mean(gibbs2$mu) - qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(gibbs2$mu) / (m)),
mean(gibbs2$mu) + qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(gibbs2$mu) / (m)))
credint_tau1 = c(mean(gibbs1$tau) - qgamma(0.95, n/2, gamma_rate) * (sd(gibbs1$tau) / (m)),
mean(gibbs1$tau) + qgamma(0.95, n/2, gamma_rate) * (sd(gibbs1$tau) / (m)))
credint_tau2 = c(mean(gibbs2$tau) - qgamma(0.95, n/2, gamma_rate) * (sd(gibbs2$tau) / (m)),
mean(gibbs2$tau) + qgamma(0.95, n/2, gamma_rate) * (sd(gibbs2$tau) / (m)))
mean(gibbs1$mu)
mean(gibbs2$mu)
mean(gibbs1$tau)
mean(gibbs2$tau)
credint_mu1
credint_mu2
credint_tau1
credint_tau2
#Credible interval for mu and tau
credint_mu1 = c(mean(gibbs1$mu) - qnorm(0.975, xbar, sqrt(1/(n*tau))) * (sd(gibbs1$mu) / (m)),
mean(gibbs1$mu) + qnorm(0.975, xbar, sqrt(1/(n*tau))) * (sd(gibbs1$mu) / (m)))
credint_mu1
credint_mu1 = c(mean(gibbs1$mu) - qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(gibbs1$mu) / (m)),
mean(gibbs1$mu) + qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(gibbs1$mu) / (m)))
credint_mu2 = c(mean(gibbs2$mu) - qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(gibbs2$mu) / (m)),
mean(gibbs2$mu) + qnorm(0.95, xbar, sqrt(1/(n*tau))) * (sd(gibbs2$mu) / (m)))
credint_tau1 = c(mean(gibbs1$tau) - qgamma(0.95, n/2, gamma_rate) * (sd(gibbs1$tau) / (m)),
mean(gibbs1$tau) + qgamma(0.95, n/2, gamma_rate) * (sd(gibbs1$tau) / (m)))
credint_tau2 = c(mean(gibbs2$tau) - qgamma(0.95, n/2, gamma_rate) * (sd(gibbs2$tau) / (m)),
mean(gibbs2$tau) + qgamma(0.95, n/2, gamma_rate) * (sd(gibbs2$tau) / (m)))
mean(gibbs1$mu)
mean(gibbs2$mu)
mean(gibbs1$tau)
mean(gibbs2$tau)
?ecdf
#Credible interval for mu and tau
cdfmu1 = ecdf(gibbs1$mu)
cdfmu1
cdfmu1(c(4.761, 5.419))
cdfmu1(c(4.8, 5.419))
cdfmu1(c(4.77, 5.419))
cdfmu1(c(4.78, 5.419))
cdfmu1(c(4.77, 5.42))
cdftau = ecdf(gibbs1$tau)
cdftau(c(0.2,0.3))
cdftau(c(0.2,0.28))
cdftau(c(0.2,0.32))
cdftau(c(0.2,0.31))
cdftau(c(0.2,0.315))
cdftau(c(0.2,0.312))
cdftau(c(0.199,0.312))
#m = Number of iterations
m = 10000
#Find credible interval percentage for mu and tau
cdfmu = ecdf(chain[,1])
cdfmu(c(4.77, 5.42))
cdftau = ecdf(chain[,2])
cdftau(c(0.199,0.312))
cdfmu(c(4.75, 5.42))
cdfmu(c(4.76, 5.42))
cdfmu(c(4.26, 5.42))
cdfmu(c(4.46, 5.42))
cdfmu(c(5, 5.42))
cdfmu(c(4.8, 5.42))
cdfmu(c(4.75, 5.42))
cdfmu(c(4.77, 5.42))
cdfmu(c(4.76, 5.42))
cdfmu(c(4.77, 5.41))
cdftau(c(0.199,0.312))
cdftau = ecdf(chain[,2])
cdftau(c(0.199,0.312))
cdftau(c(0.199,0.312))
cdftau(c(0.19,0.312))
cdftau(c(0.188,0.312))
cdftau(c(0.188,0.31))
cdftau(c(0.188,0.3))
cdftau(c(0.188,0.305))
cdftau(c(0.188,0.302))
cdftau(c(0.188,0.301))
cdftau(c(0.188,0.302))
plot(1:(m+1), chain[,1], ylab = "mu", type='l', col='blue')
mean(chain[,1])
mean(chain2[,1])
mean(chain[,2])
mean(chain2[,2])
cdfmu(c(4.77, 5.41))
cdftau(c(0.188,0.302))
# Marginal posterior means
mean(gibbs1$mu)
mean(gibbs2$mu)
mean(gibbs1$tau)
mean(gibbs2$tau)
#Fidning credible interval percentage for mu and tau
cdfmu = ecdf(gibbs1$mu)
cdfmu(c(4.77, 5.42))
cdftau = ecdf(gibbs1$tau)
cdftau(c(0.199,0.312))
